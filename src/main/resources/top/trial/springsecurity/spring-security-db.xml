<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:security="http://www.springframework.org/schema/security"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
          http://www.springframework.org/schema/beans/spring-beans.xsd
          http://www.springframework.org/schema/security
          http://www.springframework.org/schema/security/spring-security.xsd
          http://www.springframework.org/schema/context
          http://www.springframework.org/schema/context/spring-context.xsd">


    <!--
    <security:http security="none" pattern="/html/springsecurity/login.html"/>
    <security:http security="none" pattern="/html/springsecurity/failure.html"/>
    <security:http security="none" pattern="/js/**"/>
    <security:http security="none" pattern="/WEB-INF/jsp/**"/>-->

    <!-- 告知spring创建容器时要扫描的包 -->
    <context:component-scan
            base-package="top.trial.springsecurity"/>
    <!--定义过滤规则-->
    <security:http auto-config="true" use-expressions="false">
        <security:intercept-url pattern="/**" access="ROLE_USER,ROLE_ADMIN"/>
        <!--关闭CSRF跨域请求，默认是开启的-->
        <security:csrf disabled="true"/>
        <security:logout invalidate-session="true" logout-url="/html/springsecurity/logout"
                         logout-success-url="/html/springsecurity/login.html"/>
    </security:http>


    <security:authentication-manager>
        <security:authentication-provider user-service-ref="loginService">
            <!--定义加密工具类
            <security:password-encoder ref="passwordEncoder"/>-->
        </security:authentication-provider>
    </security:authentication-manager>

    <!--定义加密工具类bean
    <bean id="passwordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>-->

    <!--开启JSP页面对SPEL表达式的支持
    <bean id="webSecurityExpressionHandler" class="org.springframework.security.web.access.expression.DefaultWebSecurityExpressionHandler"/>-->


    <!-- 配置DataSource，静态工厂方法获得 -->
    <bean id="dataSource" class="top.util.jdbc.MysqlDBCPUtil"
          factory-method="getDataSource"/>

    <!-- 3.配置SqlSessionFactory对象 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 注入数据库连接池 -->
        <property name="dataSource" ref="dataSource"/>
        <!-- 配置MyBaties全局配置文件:mybatis-config.xml
        <property name="configLocation" value="classpath:mybatis/mybatisConfig.xml"/>-->
        <!-- 扫描entity包 使用别名
        <property name="typeAliasesPackage" value="top.ssmd.domain"/>-->
        <!-- 扫描sql配置文件:mapper需要的xml文件
        <property name="mapperLocations" value="classpath:mapper/*.xml" />-->
    </bean>

    <!-- 4.配置扫描Dao接口包，动态实现Dao接口，注入到spring容器中 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!-- 注入sqlSessionFactory -->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <!-- 给出需要扫描Dao接口包 -->
        <property name="basePackage" value="top.trial.springsecurity.dao"/>
    </bean>
</beans>