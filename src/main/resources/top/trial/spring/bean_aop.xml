<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop-3.1.xsd">

    <!-- 配置业务层bean 没使用扫描-->
    <bean id="accountService"
          class="top.trial.spring.aop.service.impl.AccountOperationAopServiceImpl"></bean>
    <bean id="AccountOperationDao"
          class="top.trial.spring.aop.dao.impl.AccountOperationDaoImpl"></bean>
    <bean id="dataSource" class="top.util.jdbc.MysqlDBCPUtil"
          factory-method="getDataSource"/>
    <!-- 配置QueryRunner-->
    <bean id="queryRunner"
          class="org.apache.commons.dbutils.QueryRunner">
        <constructor-arg name="ds" ref="dataSource"/>
    </bean>

    <!-- 配置通知类 -->
    <bean id="logger" class="top.trial.spring.aop.advice.Logger"></bean>

    <!-- AOP
        环境准备：
            导入相应jar包/导入maven依赖
            导入aop约束
        配置步骤：
            1、将通知bean交给spring容器处理
            2、使用aop:config配置aop
            3、使用aop:aspect配置切面
                id为切面唯一标识
                ref为引用通知类的id
            4、使用aop:before、aop:after、aop:after-returning、aop:after-throwing配置通知类型
                method为通知类的方法
                pointcut切入点表达式
                    关键字execution(表达式)
                    表达式写法：访问修饰符 返回值 包名.包名....类名.方法名(参数列表)
            5、可以将切入点表达式提取出来，使用aop:pointcut标签包装
                在aop:aspect内的aop:pointcut只在当前切面可以使用
                在aop:aspect外aop:config内的aop:pointcut可以在所有切面中使用【注意：aop:pointcut标签必须在aop:aspect标签前面】

    -->
    <aop:config>
        <aop:pointcut expression="execution(* top.trial..AccountOperationAopServiceImpl.*(..))" id="pc2"/>
        <aop:aspect id="log4aop" ref="logger">
            <!-- 前置通知，切入点方法执行前执行 -->
            <aop:before method="beginLogging" pointcut-ref="pc2"/>

            <!-- 后置通知，切入点方法正常执行后执行 -->
            <aop:after-returning method="endLogging"
                                 pointcut="execution(* top.trial..AccountOperationAopServiceImpl.*(..))"/>

            <!-- 异常通知，切入点方法执行出现异常执行，与后置通知互斥 -->
            <aop:after-throwing method="exceptionLogging"
                                pointcut="execution(* top.trial..AccountOperationAopServiceImpl.*(..))"/>

            <!-- 最终通知，切入点方法执行后，在后置通知或异常通知执行后执行 -->
            <aop:after method="finalLogging" pointcut="execution(* top.trial..AccountOperationAopServiceImpl.*(..))"/>

            <!-- 环绕通知 -->
            <aop:around method="aroundLogging" pointcut-ref="pc1"/>

            <aop:pointcut expression="execution(* top.trial..AccountOperationAopServiceImpl.*(..))" id="pc1"/>
        </aop:aspect>
    </aop:config>
</beans>